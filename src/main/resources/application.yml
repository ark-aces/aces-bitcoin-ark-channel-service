server:
  port: 9190

serverInfo:
  name: "Aces BTC-ARK Channel Service"
  description: "ACES BTC to ARK Channel service for transferring BTC to ARK"
  instructions: >
    After this contract is executed, any BTC sent to depositBtcAddress will be exchanged for ARK and 
    sent directly to the given recipientArkAddress less service fees.
  version: "1.1.0"
  websiteUrl: "https://arkaces.com"
#  capacities:
#    -
#      value: "5000.00"
#      unit: "ARK"
  inputSchema: >
    {
      "type": "object",
      "properties": {
        "recipientArkAddress": {
          "type": "string",
          "title": "Recipient ARK Address",
          "description": "Enter recipient ARK address to transfer funds to."
        },
         "returnBtcAddress": {
            "type": "string",
            "title": "Return BTC Address",
            "description": "Enter return BTC address to send returns to."
          }
      },
      "required": [
        "recipientArkAddress"
      ]
    }
  outputSchema: >
    {
      "type": "object",
      "properties": {
        "depositBtcAddress": {
          "type": "string",
          "title": "Deposit BTC Address",
          "description": "Send BTC to this address to execute contract."
        },
        "recipientArkAddress": {
          "type": "string",
          "title": "Recipient ARK Address",
          "description": "ARK will arrive at this address on contract execution."
        },
        "transfers": {
          "type": "array",
          "properties": {
            "id": {
                "type": "string",
                "title": "Transfer ID",
                "description": "Identifier for transfer"
            },
            "status": {
                "type": "string",
                 "title": "Status",
                 "description": "The status of the transfer"
            },
            "createdAt": {
              "type": "string",
              "title": "Create Date",
              "description": "The time the contract was created."
            },
            "btcTransactionId": {
              "type": "string",
              "title": "Transaction ID (BTC)",
              "description": "The transaction ID for the BTC contract fulfillment"
            },
            "btcAmount": {
              "type": "string",
              "title": "Transfer Amount (BTC)",
              "description": "The amount of BTC to transfer"
            },
            "btcToArkRate": {
              "type": "string",
              "title": "ARK/BTC Exchange Rate",
              "description": "Amount of ARK to receive per BTC"
            },
            "btcFlatFee": {
              "type": "string",
              "title": "Flat Fee (BTC)",
              "description": "Fixed fee per execution, charged in BTC"
            },
            "btcPercentFee": {
              "type": "string",
              "title": "Percentage Fee (BTC)",
              "description": "Percentage fee per execution, charged in BTC"
            },
            "btcTotalFee": {
              "type": "string",
              "title": "Total Fees (BTC)",
              "description": "The sum of flat fees and percentage fees, charged in BTC"
            },
            "arkSendAmount": {
              "type": "string",
              "title": "Receiving Amount (ARK)",
              "Description": "Total ARK to be received, net of fees"
            },
            "arkTransactionId": {
              "type": "string",
              "title": "Transaction ID (ARK)",
              "description": "The transaction ID for the ARK contract fulfillment"
            },
            "returnBtcTransactionId": {
              "type": "string",
              "title": "Transaction ID (BTC)",
              "description": "The transaction ID for the BTC contract return"
            }
          }
        }
      }
    }

spring:
  datasource:
    platform: "postgres"
    url: "jdbc:postgresql://localhost:5432/aces_btc_ark_channel_service_db"
    username: "postgres"
    password: "password"
  jpa:
    hibernate:
      ddl-auto: "validate"
#  mail:
#    host: "change-me"
#    port: 587
#    username: "change-me"
#    password: "change-me"
#    properties:
#      mail.smtp.auth: true
#      mail.startttls.enable: true
#

security.ignored: "/**"

arkNetworkConfigPath: "ark_network_config/testnet.yml"

fees:
  btcFlatFee: 0
  btcPercentFee: 1

serviceArkAccount:
  address: change-me
  passphrase: change-me

bitcoinRpc:
  url: "http://localhost:18332/"
  username: "bitcoinrpc"
  password: "change_this_to_a_long_random_password"

bitcoinListener:
  url: http://localhost:9090
  minConfirmations: 1

bitcoinEventCallbackUrl: http://localhost:9190/bitcoinEvents

# Send notifications on low capacity and transfer completed/failed
notifications:
  enabled: false
  recipientEmailAddress: "change_me"
  fromEmailAddress: "change_me"

# Capacity threshold at which low capacity notifications will be sent
lowCapacityThreshold: "100.00"